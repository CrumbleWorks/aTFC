buildscript {
    repositories {
        maven {
            url 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "org.sonarqube" version "3.0"
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.0.1-Enyo'
group = 'org.crumbleworks.forge.aTFC'
archivesBaseName = 'aTFC'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //this allows changing access-modifiers of minecraft code
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                atfc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                atfc {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // This doesn't make too much sense, but is necessary to keep CI-builds from stopping just because the data generator feels
            // like it needs to crash in order to let one know that it has done what it's supposed to do.
            forceExit false

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'atfc',
                 '--all',
                 '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/')

            mods {
                atfc {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Don't move this section below the dependencies-section. Tasks will go boom if you do.
configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.36'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api

    // embed dependencies are copied over into the mod-jar built by the assemble task
    embed 'org.slf4j:slf4j-api:1.7.25'
    embed 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'
    
    embed 'org.reflections:reflections:0.9.12'
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

jar {
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes([
            "Specification-Title": "atfc",
            "Specification-Vendor": "Crumbleworks",
            "Specification-Version": "1",            
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vencor": "Crumbleworks",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "GitHub": "https://github.com/CrumbleWorks/aTFC"
        ])
    }
}

processResources {
    exclude '.cache'
}

// Custom Tasks
task buildData(type: GradleBuild) {
    group 'atfc'
    description 'Runs a build and the data generator of Forge.'

    tasks = ['deleteGeneratedFiles', 'build', 'runData', 'build', 'cleanEclipse', 'eclipse']
}

task deleteGeneratedFiles(type: Delete) {
    group 'atfc'
    description 'Deletes generated files.'

    delete 'src/generated'
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

task buildData(type: GradleBuild) {
    tasks = ['build', 'runData']
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// SonarQube plugin configuration
sonarqube {
    properties {
        property "sonar.projectKey", "CrumbleWorks_aTFC"
        property "sonar.organization", "crumbleworks"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
